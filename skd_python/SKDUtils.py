import yaml
import subprocess
import os
import json
####################################### SKD UTILITY CLASS ##########################################
class SafeTrajectory:
    """ A small class representing a specific safe trajectory generated by stage 1 of the SKD """
    def __init__(self, safe_traj_filepath, goal_area, file_traj_index):
        # Minor error checking
        assert (len(goal_area) == 2), "Error goal area for SafeTrajectory instance is size %d" % (len(goal_area))
        assert (file_traj_index >= 0), "Error index has to be > 0"
        self.safe_traj_filepath = safe_traj_filepath
        self.goal_area = goal_area
        self.file_traj_index = file_traj_index

    def get_safe_traj_filepath(self):
        """ Get the safe traj data root """
        return self.safe_traj_filepath

    def get_goal_area(self):
        """ Get goal area """
        return self.goal_area

    def get_file_traj_index(self):
        """ Get file traj index """
        return self.file_traj_index




class ScenarioSituation():
    """ A class representing a Scenario Situation in which a kamikaze trajectory 
    was generated """
    def __init__(self, controller_id, safe_traj_obj, kamikaze_logfile, output_dir):
        assert (kamikaze_logfile != None), "ScenarioSituation Error. Logfile is None"
        self.safe_traj_obj = safe_traj_obj
        self.goal_area = self.get_goal_area()
        self.traj_key_index = self.get_traj_key()
        self.logfile = kamikaze_logfile
        self.controller_id = controller_id
        self.output_dir = output_dir

    def get_controller_id(self):
        return self.controller_id

    def get_goal_area(self):
        return self.safe_traj_obj.get_goal_area()

    def get_traj_key(self):
        return self.safe_traj_obj.get_file_traj_index()

    def get_log_file(self):
        return self.logfile

    def get_safe_traj_key_id(self):
        """ Returns an unique id tied to the goal and traj index of the current situation"""
        return "_g_%d_%d" % (self.goal_area[0], self.goal_area[1]) +  "_k_%d_" % (self.traj_key_index)

    def get_log_output_dir(self):
        # Use name of log as key for output dir
        key_file = os.path.basename(self.logfile)
        key_items = key_file.split(".")
        key = key_items[0]
        return (self.output_dir  + "/analyser_m_" + key)

    def get_safe_traj_filepath(self):
        return self.safe_traj_obj.get_safe_traj_filepath()

    def get_output_dir(self):
        return self.output_dir

    """ Returns the safe ped trajectory associated with this object as a list of lists(2D points) """
    def get_safe_traj(self):
        data_file = open(self.get_safe_traj_filepath())
        ped_traj_data_json = json.load(data_file)
        data_file.close()
        return ped_traj_data_json[str(self.get_traj_key())]


    def show_scenario_info(self):
        return "GOAL ID:" + list_to_str(self.goal_area) + "  M:%d K:%d " % (self.controller_id,self.traj_key_index)
        



######################################## SKD UTILITIES ###########################################
def get_skd_configurations(config_path):
    """
    Loads the yaml configuration file for the assessment of a vehicle. The function returns a
    dictionary with the corresponding configuration fields
    and values for the assessment.
    """
    with open(config_path) as config_file:
        configurations = yaml.full_load(config_file)
        print(configurations)
        return configurations


def list_to_str(list_var):
		result = "["
		for val in list_var:
			result = result + " %s" % (val)
		result = result + " ]"
		return result



def sed_file(filepath, old_txt, new_txt):
	subprocess.call(["sed -i 's@%s@%s @' %s" % (old_txt, new_txt, filepath)], shell = True)


